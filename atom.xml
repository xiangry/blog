<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[XingSheng's Blog]]></title>
  <subtitle><![CDATA[Love XiangRY]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sthkey.com/"/>
  <updated>2014-11-03T07:14:33.847Z</updated>
  <id>http://sthkey.com/</id>
  
  <author>
    <name><![CDATA[XingSheng]]></name>
    <email><![CDATA[xingsheng.gao@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2014.11.03]]></title>
    <link href="http://sthkey.com/2014/11/03/2014-11-03/"/>
    <id>http://sthkey.com/2014/11/03/2014-11-03/</id>
    <published>2014-11-03T06:28:52.000Z</published>
    <updated>2014-11-03T07:14:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="天气">天气</h2>
<p>想找个图片，脑海突然闪过紫色余分这个角色，虽然张狂，却也有敬畏。紫色出场不多，却每每有一种唯美。<br><a id="more"></a><br><img src="http://img-pili.qiniudn.com/pili/desktop/ziseyufen.gif" alt="紫色余分"><br><em>“我的王子啊…”,“如果再让我遇见你一次，我还是会选择和你比剑，然后输给你，做你的剑侍，在一路听你编剑声的故事”</em></p>
<hr>
<p>今天算得上难得的好天气了，晴。经常路过的那片爬山虎大部分都红了，早先红的那片叶子落得没剩多少，这就是秋天。看着沐浴在阳光下的这真实地一切，反而有一种莫名的不真切。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="天气">天气</h2>
<p>想找个图片，脑海突然闪过紫色余分这个角色，虽然张狂，却也有敬畏。紫色出场不多，却每每有一种唯美。<br>]]>
    
    </summary>
    
      <category term="练 随便写点什么" scheme="http://sthkey.com/tags/%E7%BB%83-%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[好博客]]></title>
    <link href="http://sthkey.com/2014/10/27/%E5%A5%BD%E5%8D%9A%E5%AE%A2/"/>
    <id>http://sthkey.com/2014/10/27/好博客/</id>
    <published>2014-10-27T02:15:17.000Z</published>
    <updated>2014-10-27T02:28:23.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://ohcoder.com/">Oh!Coder</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://ohcoder.com/">Oh!Coder</a></p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[test]]></title>
    <link href="http://sthkey.com/2014/10/18/test/"/>
    <id>http://sthkey.com/2014/10/18/test/</id>
    <published>2014-10-18T06:48:19.000Z</published>
    <updated>2014-10-18T07:08:47.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://zengrong.net/post/2169.htm">Python 包管理工具解惑</a></p>
<p>python packaging</p>
<h2 id="一、困惑">一、困惑</h2>
<p>作为一个 Python 初学者，我在包管理上感到相当疑惑（嗯，是困惑）。主要表现在下面几个方面：</p>
<ol>
<li>这几个包管理工具有什么不同？<ul>
<li>distutils</li>
<li>setuptools</li>
<li>distribute</li>
<li>disutils2</li>
<li>distlib</li>
<li>pip</li>
</ul>
</li>
<li>什么时候该用pip，什么时候该用 <code>setup.py</code> ，它们有关系么？</li>
<li><code>easy_install</code>、<code>ez_setup.py</code>、<code>setup.py</code>、<code>setup.cfg</code> 分别都是干啥的？</li>
<li>wheel 和 pip 的关系？</li>
<li>Egg 和 whl 的关系？</li>
<li>如何发布自己的模块（发布到PyPI）？</li>
<li>如何进行模块的私有发布（不发布到PyPI）？</li>
</ol>
<p>为了弄清这些问题，我找了许多资料。最后发现最好的资料还是 python 的官方文档。</p>
<p>下面是阅读了所有我找到的资料后的一个总结，希望能帮到几个月后又把这些全部忘光的那个自己。<a id="more"></a></p>
<h2 id="二、python_包管理工具大乱斗">二、python 包管理工具大乱斗</h2>
<p>我用时间顺序来描述乱斗过程。</p>
<h3 id="1-_distutils">1. distutils</h3>
<p><a href="https://docs.python.org/3/library/distutils.html">distutils</a> 是 python 标准库的一部分，2000年发布。使用它能够进行 python 模块的 <a href="https://docs.python.org/3/install/index.html">安装</a> 和 <a href="https://docs.python.org/3/distutils/index.html">发布</a>。</p>
<p>setup.py 就是利用 <a href="https://docs.python.org/3/library/distutils.html">distutils</a> 的功能写成，我们可以看一个简单的 <a href="https://docs.python.org/3/distutils/introduction.html?highlight=distutils#a-simple-example">setup.py</a> 的例子。</p>
<p>在这里可以看到关于 setupt.py 格式的所有详细描述：<a href="https://docs.python.org/3/distutils/setupscript.html">Writing the Setup Script</a>。</p>
<p>要安装一个模块到当前的 python 环境中，可以使用这个模块提供的 setup.py 文件：</p>
<pre lang="python">
python setup.py install
</pre>

<p>下面的代码会发布一个 python 模块，将其打包成 tar.gz 或者 zip 压缩包：</p>
<pre lang="python">
python setup.py sdist
</pre>

<p>甚至能打包成 rpm 或者 exe 安装包：</p>
<pre lang="python">
python setup.py bdist_rpm
python setup.py bdist_wininst
</pre>

<h3 id="2-_setuptools_和_distribute">2. setuptools 和 distribute</h3>
<p><a href="https://docs.python.org/3/distutils/setupscript.html">setuptools</a> 是一个为了增强 distutils 而开发的集合，2004年发布。它包含了 <code>easy_install</code> 这个工具。</p>
<p><a href="https://pypi.python.org/pypi/setuptools/#installation-instructions">ez_setup.py</a> 是 setuptools 的安装工具。<code>ez</code> 就是 <code>easy</code> 的缩写。</p>
<p>简单的说，setuptools 是一个项目的名称，是基础组件。而 <code>easy_install</code> 是这个项目中提供的工具，它依赖基础组件工作。</p>
<p><strong>为了方便描述，下面文章中提到的 setuptools 被认为与 <code>easy_install</code> 同义。</strong></p>
<p>使用 setuptools 可以自动 <a href="https://pythonhosted.org/setuptools/easy_install.html">下载、构建、安装和管理</a> python 模块。</p>
<p>例如，从 PyPI 上安装一个包：</p>
<pre lang="python">
easy_install SQLObject
</pre>

<p>下载一个包文件，然后安装它：</p>
<pre lang="python">
easy_install http://example.com/path/to/MyPackage-1.2.3.tgz
</pre>

<p>从一个 .egg 格式安装：</p>
<pre lang="python">
easy_install /my_downloads/OtherPackage-3.2.1-py2.3.egg
</pre>

<p><a href="https://pypi.python.org/pypi/distribute">distribute</a> 是 setuptools 的一个分支版本。分支的原因可能是有一部分开发者认为 setuptools 开发太慢了。但现在，distribute 又合并回了 setuptools 中。因此，我们可以认为它们是同一个东西。事实上，如果你查看一下 <code>easy_install</code> 的版本，会发现它本质上就是 distribute 。</p>
<pre lang="python">
# easy_install --version
distribute 0.6.28
</pre>

<h3 id="3-_Eggs">3. Eggs</h3>
<p><a href="http://pythonhosted.org/setuptools/formats.html">Eggs</a> 格式是 setuptools 引入的一种文件格式，它使用 .egg 扩展名，用于 Python 模块的安装。</p>
<p>setuptools 可以识别这种格式。并解析它，安装它。</p>
<p>想要详细了解，可以看看这篇：<a href="http://peak.telecommunity.com/DevCenter/PythonEggs">The Quick Guide to Python Eggs</a>。</p>
<blockquote>
<p>Eggs are to Pythons as Jars are to Java..</p>
</blockquote>
<h3 id="4-_pip">4. pip</h3>
<p><strong>注意，从此处开始，<code>easy_install</code> 和 <code>setuptools</code> 不再同义。</strong></p>
<p><a href="https://pypi.python.org/pypi/pip/">pip</a> 是目前 python 包管理的事实标准，2008年发布。它被用作 <code>easy_install</code> 的替代品，但是它仍有大量的功能建立在 setuptools 组件之上。</p>
<p>pip 希望不再使用 <a href="http://peak.telecommunity.com/DevCenter/PythonEggs">Eggs</a> 格式（虽然它支持 Eggs），而更希望采用“源码发行版”（使用 <code>python setup.py sdict</code> 创建）。这可以充分利用 <a href="https://pip.pypa.io/en/latest/reference/pip_install.html#requirements-file-format">Requirements File Format</a> 提供的方便功能。</p>
<p>pip 可以利用 requirments.txt 来实现在依赖的安装。在 <code>setup.py</code> 中，也存在一个 <code>install_requires</code> 表来指定依赖的安装。它们的区别在哪里？可以看这篇文章：<a href="https://caremad.io/blog/setup-vs-requirement/">setup.py vs requirements.txt</a> <a href="http://pyzh.readthedocs.org/en/latest/python-setup-dot-py-vs-requirements-dot-txt.html">（中文版）</a>。</p>
<p>pip 支持 [git/svn/hg 等流行的 VCS 系统]，可以直接从 gz 或者 zip 压缩包安装，支持搜索包，以及指定服务器安装等等功能。</p>
<p><a href="https://packaging.python.org/en/latest/technical.html#pip-vs-easy-install">pip vs easy_install</a> 详细介绍了两者的不同。它们可以说是各占胜场，但 pip 明显优势更大。</p>
<h3 id="5-_wheel">5. wheel</h3>
<p><a href="http://wheel.rtfd.org/">wheel</a> 本质上是一个 zip 包格式，它使用 .whl 扩展名，用于 python 模块的安装，它的出现是为了替代 Eggs。</p>
<p>wheel 还提供了一个 <code>bdist_wheel</code> 作为 setuptools 的扩展命令，这个命令可以用来生成 wheel 包。</p>
<p>pip 提供了一个 wheel 子命令来安装 wheel 包。当然，需要先安装 wheel 模块。</p>
<p><a href="http://wheel.readthedocs.org/en/latest/#defining-the-python-version">setup.cfg</a> 可以用来定义 wheel 打包时候的相关信息。</p>
<p><a href="https://packaging.python.org/en/latest/technical.html#wheel-vs-egg">Wheel vs Egg</a> 详细介绍了 wheel 和 Eggs 格式的区别，很显然，wheel 优势明显。</p>
<p><a href="http://pythonwheels.com/">Python Wheels</a> 网站展示了使用 Wheels 发行的 python 模块在 PyPI 上的占有率。</p>
<p><a href="https://pypip.in/wheel.html">pypip.in</a> 也支持 wheel。</p>
<h3 id="6-_distutils2_和_distlib">6. distutils2 和 distlib</h3>
<p><a href="http://pythonhosted.org//Distutils2/">distutils2</a> 被设计为 <a href="https://docs.python.org/3/library/distutils.html">distutils</a> 的替代品。从2009年开发到2012年。它包含更多的功能，并希望以 <code>packaging</code> 作为名称进入 python 3.3 成为标准库的一部分。但这个计划 <a href="https://mail.python.org/pipermail/python-dev/2012-June/120430.html">后来停滞了</a> 。</p>
<p><a href="https://pypi.python.org/pypi/distlib">distlib</a> 是 <a href="http://pythonhosted.org//Distutils2/">distutils2</a> 的部分，它为 <code>distutils2/packaging</code> 提供的低级功能增加高级 API，使其便于使用。</p>
<p><a href="http://pythonhosted.org/distlib/overview.html">这里</a> 介绍了 distlib 没有进入 python 3.3 标准库的一些原因。</p>
<p>因此，可以暂时不必了解这两个工具，静观其变即可。</p>
<h2 id="三、工具选择">三、工具选择</h2>
<p>如果仔细看过上面的乱斗内容，我相信你已经清楚当前应该如何选择了。</p>
<p>对于我这样刚刚开始的新手来说，自然是使用 pip 而不使用 <code>easy_install</code> 了。</p>
<p>如果发布模块，当然是使用 wheel 格式。</p>
<h2 id="四、发布自己的模块">四、发布自己的模块</h2>
<p>对于 python3 程序员来说，当然应该先看这一篇：<a href="https://docs.python.org/3/distributing/index.html">Distributing Python Modules</a>。</p>
<p>另外，<a href="https://packaging.python.org/en/latest/distributing.html">Tutorial on Packaging and Distributing Projects</a> 也足够详细和官方。</p>
<p>而 Python2 程序员则应该看这篇 <a href="https://docs.python.org/2.7/distutils/index.html">Distributing Python Modules</a> 。</p>
<p>当然，setuptools 的官方文档也是不错的教程：<a href="http://pythonhosted.org/setuptools/setuptools.html">Building and Distributing Packages with Setuptools</a> 。</p>
<p>这篇教程可以用来入门：<a href="https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/">Sharing Your Labor of Love: PyPI Quick and Dirty</a></p>
<p>至于如何发布自己的模块到 PyPI 或者搭建自己的私有包管理服务器，上面的文章已经讲得非常清楚了。</p>
<h2 id="五、引用">五、引用</h2>
<p>上面提到的大部分资料，都是在这里找到，或者是提到：<a href="https://packaging.python.org/en/latest/">Python Packaging User Guide</a>。</p>
<p>感谢这篇文章，让我不再纠结，然后又下决心写了本文继续纠结：<a href="http://stackoverflow.com/a/14753678">Differences between distribute, distutils, setuptools and distutils2?</a> 。</p>
<p>这篇文章也比较碎：<a href="http://blog.csdn.net/lynn_kong/article/details/17540207">关于python中的setup.py</a>，而且比本文范例更多。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://zengrong.net/post/2169.htm">Python 包管理工具解惑</a></p>
<p>python packaging</p>
<h2 id="一、困惑">一、困惑</h2>
<p>作为一个 Python 初学者，我在包管理上感到相当疑惑（嗯，是困惑）。主要表现在下面几个方面：</p>
<ol>
<li>这几个包管理工具有什么不同？<ul>
<li>distutils</li>
<li>setuptools</li>
<li>distribute</li>
<li>disutils2</li>
<li>distlib</li>
<li>pip</li>
</ul>
</li>
<li>什么时候该用pip，什么时候该用 <code>setup.py</code> ，它们有关系么？</li>
<li><code>easy_install</code>、<code>ez_setup.py</code>、<code>setup.py</code>、<code>setup.cfg</code> 分别都是干啥的？</li>
<li>wheel 和 pip 的关系？</li>
<li>Egg 和 whl 的关系？</li>
<li>如何发布自己的模块（发布到PyPI）？</li>
<li>如何进行模块的私有发布（不发布到PyPI）？</li>
</ol>
<p>为了弄清这些问题，我找了许多资料。最后发现最好的资料还是 python 的官方文档。</p>
<p>下面是阅读了所有我找到的资料后的一个总结，希望能帮到几个月后又把这些全部忘光的那个自己。]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lua Debug]]></title>
    <link href="http://sthkey.com/2014/10/16/Lua-Debug/"/>
    <id>http://sthkey.com/2014/10/16/Lua-Debug/</id>
    <published>2014-10-16T06:18:54.000Z</published>
    <updated>2014-10-16T07:41:42.000Z</updated>
    <content type="html"><![CDATA[<p><a id="more"></a><br><em>当要定位lua某个方法被调用的位置通常可以通过打印堆栈信息来做到，刚接触，找到这篇文章<a href="http://see.sl088.com/wiki/Lua_debug" title="Lua Debug">“Lua debug”</a></em></p>
<hr>
<h3 id="debug">debug</h3>
<p>返回当前的堆栈信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">debug</span>.traceback()</div></pre></td></tr></table></figure>

<h3 id="sethook">sethook</h3>
<p>一个非常有意思的机制，注册一个函数，在程序运行中某一事件触发时调用这个函数。监听的事件有”call”、”return”、”line”、”count”。<a href="http://book.luaer.cn/_130.htm">Hooks</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">- 打印解释器执行的每一个新行的行号：</div><div class="line"></span>debug.traceback()</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>]]>
    
    </summary>
    
      <category term="Lua" scheme="http://sthkey.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阅读]]></title>
    <link href="http://sthkey.com/2014/10/06/%E9%98%85%E8%AF%BB/"/>
    <id>http://sthkey.com/2014/10/06/阅读/</id>
    <published>2014-10-06T02:36:32.000Z</published>
    <updated>2014-10-13T02:16:39.000Z</updated>
    <content type="html"><![CDATA[<p><a id="more"></a><br><img src="http://img-pili.qiniudn.com/pili%2Fdesktop%2Fxiangranyi.jpg" alt="霹雳布袋戏：香染衣" title="霹雳布袋戏：香染衣"></p>
<hr>
<h2 id="路在脚下"><em>路在脚下</em></h2>
<p>本人对于设计真是头疼，排版更是想破了脑袋，让我着实恼火非常，<a href="http://book.douban.com/subject/3323633/" title="让你的作品更出色">写给大家看的设计书</a>这本书了给我帮助。这本书本身是很易懂，奈何设计这个领域是在是太丰富了，自己只是了解了点皮毛，还需要多多实践啊。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>]]>
    
    </summary>
    
      <category term="阅读" scheme="http://sthkey.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://sthkey.com/2014/10/05/hello-world/"/>
    <id>http://sthkey.com/2014/10/05/hello-world/</id>
    <published>2014-10-05T12:46:21.000Z</published>
    <updated>2014-10-05T12:46:21.000Z</updated>
    <content type="html"><![CDATA[<p><a id="more"></a><br>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[初识markdown]]></title>
    <link href="http://sthkey.com/2014/10/05/%E5%88%9D%E8%AF%86markdown/"/>
    <id>http://sthkey.com/2014/10/05/初识markdown/</id>
    <published>2014-10-05T04:10:30.000Z</published>
    <updated>2014-10-13T02:16:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="接触">接触</h2>
<p><em>程序猿一只，突然意识到要写点东西，为hexo而接触到了markdown这个为广大码农所用的标记语言，<br>看来自己不是个合格的程序员那。在这里用这片文字作为自己的第一步，hello world。</em></p>
<hr>
<h2 id="一些语法">一些语法</h2>
<h2><a id="more"></a></h2>
<h3 id="标题">标题</h3>
<ul>
<li><p>Atx方式 加前缀#的个数表明标题层级</p>
<pre><code>  多级标题，<span class="number">1</span>-<span class="number">6</span>级
  <span class="comment">#一级标题</span>
  <span class="comment">##二级标题</span>
</code></pre></li>
<li><p>Setext方式 加前缀#的个数表明标题层级</p>
<pre><code>  大标题
  =<span class="ruby">==
</span>  小标题
  -<span class="ruby">--</span>
</code></pre></li>
</ul>
<hr>
<h3 id="列表">列表</h3>
<ul>
<li><p>列表 </p>
<ul>
<li><p>无序列表</p>
<ul>
<li><p>无序列表 “- ”</p>
<pre><code>  符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长
  -<span class="ruby"> 无序列表
</span>  -<span class="ruby"> 无序列表
</span>  -<span class="ruby"> 很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</span>
</code></pre></li>
<li><p>无序列表 “+ ”</p>
<pre><code>  符号之后的空格不能少，-+<span class="keyword">*</span>效果一样，但不能混合使用，因混合是嵌套列表
  + 无序列表
  + 无序列表
</code></pre></li>
<li><p>无序列表 “* ”</p>
<pre><code>  符号之后的空格不能少，-+<span class="keyword">*</span>效果一样，但不能混合使用，因混合是嵌套列表
  <span class="keyword">*</span> 无序列表
  <span class="keyword">*</span> 无序列表
</code></pre></li>
</ul>
</li>
<li><p>有序列表 </p>
<pre><code>  数字不能省略但可无序，点号之后的空格不能少
  1. 有序列表
  2. 有序列表
</code></pre></li>
</ul>
</li>
<li><p>嵌套列表</p>
<pre><code>      -<span class="ruby">+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少
</span>
      -<span class="ruby"> 嵌套列表
</span>       + 嵌套列表
       + 嵌套列表
        -<span class="ruby"> 嵌套列表
</span>         * 嵌套列表
      -<span class="ruby"> 嵌套列表</span>
</code></pre></li>
</ul>
<h2 id="文字超链接">文字超链接</h2>
<hr>
<p><a href="http://ibruce.info/2013/11/26/markdown/" title="值得一看，来来来来">不如 markdown简明语法</a></p>
<pre><code>    <span class="constant">Tooltips</span>可省略
    [不如 markdown简明语法](<span class="symbol">http:</span>/<span class="regexp">/ibruce.info/</span><span class="number">2013</span>/<span class="number">11</span>/<span class="number">26</span>/markdown/ <span class="string">"值得一看，来来来来"</span>)
</code></pre><h2 id="图片超链接">图片超链接</h2>
<hr>
<p><img src="https://github.com/xingsheng/quick-cocos2d-x/blob/develop/samples/benchmark/res/UIFont.png" alt="GitHub Mark" title="GitHub Mark"></p>
<pre><code>    多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记
    ![GitHub Mark](http<span class="variable">s:</span>//github.<span class="keyword">com</span>/xingsheng/quick-cocos2d-<span class="keyword">x</span>/blob/develop/samples/benchmark/<span class="keyword">res</span>/UIFont.png <span class="string">"GitHub Mark"</span>)
</code></pre><h2 id="图片超链接-1">图片超链接</h2>
<hr>
<p><a href="http://bruce-sha.github.io">不如</a><br><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png" alt="GitHub Octocat"></p>
<pre><code>    索引，<span class="number">1</span> <span class="number">2</span>可以是任意字符
    [不如][<span class="number">1</span>]
    ![<span class="constant">GitHub</span> <span class="constant">Octocat</span>][<span class="number">2</span>]

    [<span class="number">1</span>]<span class="symbol">:http</span><span class="symbol">://bruce-sha</span>.github.io
    [<span class="number">2</span>]<span class="symbol">:http</span><span class="symbol">://github</span>.global.ssl.fastly.net/images/modules/logos_page/<span class="constant">Octocat</span>.png
</code></pre><h2 id="自动链接">自动链接</h2>
<hr>
<p><a href="http://ibruce.info">http://ibruce.info</a></p>
<a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#98;&#x75;&#x2e;&#x72;&#117;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;">&#98;&#x75;&#x2e;&#x72;&#117;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;</a>

<pre><code>    尖括号
    <span class="tag">&lt;<span class="title">http:</span>//<span class="attribute">ibruce.info</span>&gt;</span>
    <span class="tag">&lt;<span class="title">bu.ru@qq.com</span>&gt;</span>
</code></pre><h2 id="代码：行内代码">代码：行内代码</h2>
<hr>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> s = <span class="string">"hello Markdown"</span></div><div class="line">println( s )</div></pre></td></tr></table></figure>

<pre><code>        在第一行后指定编程语言，也可以不指定
</code></pre><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> s = <span class="string">"hello Markdown"</span></div><div class="line">println( s )</div></pre></td></tr></table></figure>

<h1 id="代码：段落代码">代码：段落代码</h1>
<hr>
<pre><code><span class="keyword">val</span> s = <span class="string">"hello Markdown"</span>
println( s )


    每行文字前加<span class="number">4</span>个空格或者<span class="number">1</span>个Tab
    <span class="keyword">val</span> s = <span class="string">"hello Markdown"</span>
    println( s )
</code></pre><h1 id="代码：hexo">代码：hexo</h1>
<hr>
<pre><code><span class="xml"><span class="tag">&lt;<span class="title">hexoescape</span>&gt;</span>0<span class="tag">&lt;/<span class="title">hexoescape</span>&gt;</span>

可指定编程语言，『』代表左右大括号
\</span><span class="template_tag">{% codeblock [title] [lang:lua] [<span class="keyword">url</span>] [link text] %\}
    code snippet
\{% endcodeblock %\}</span>
</code></pre><h1 id="注释">注释</h1>
<hr>
<pre><code>用html的注释，好像只有这样？
<span class="comment">&lt;!-- 注释 --&gt;</span>
</code></pre><hr>
<p><a href="http://ibruce.info/2013/11/26/markdown/" title="不如的博客">不如 markdown简明语法</a><br><a href="http://www.jianshu.com/p/q81RER" title="Markdown 新手指南">献给写作者的 Markdown 新手指南</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="接触">接触</h2>
<p><em>程序猿一只，突然意识到要写点东西，为hexo而接触到了markdown这个为广大码农所用的标记语言，<br>看来自己不是个合格的程序员那。在这里用这片文字作为自己的第一步，hello world。</em></p>
<hr>
<h2 id="一些语法">一些语法</h2>
<h2>]]>
    
    </summary>
    
      <category term="markdown" scheme="http://sthkey.com/tags/markdown/"/>
    
      <category term="学习记录" scheme="http://sthkey.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[bash 环境变量]]></title>
    <link href="http://sthkey.com/2014/10/05/bash-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://sthkey.com/2014/10/05/bash-环境变量/</id>
    <published>2014-10-05T02:38:55.000Z</published>
    <updated>2014-10-05T12:34:29.000Z</updated>
    <content type="html"><![CDATA[<p>-日常应用和开发过程中，经常会遇到一些问题，比如移动删除某些文件，批量的做某些重复的工作、某些工具的使用，使用命令行工具会更加方便。若要使用命令行工具，一定要知道它的使用环境，在这里学习一下 bash shell 的环境变量。-</p>
<p><a id="more"></a></p>
<h4 id="查看系统的环境变量">查看系统的环境变量</h4>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ env</div></pre></td></tr></table></figure>

<h4 id="常见环境变量">常见环境变量</h4>
<ul>
<li>SHELL：当前用户使用的是哪种shell。shell的种类繁多，不同的shell在移植上会有差别，本人初学，使用的bash，未考虑移植</li>
<li>PATH：决定了shell将要到哪些目录中寻找命令或程序。注意PATH一般会是/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin这种格式，’:’标示并列，标示PATH有多个值，查找个时候会依次按照这些值去查找</li>
<li>HOME：当前用户的主目录</li>
<li>HOSTNAME：是指主机的名称，许多应用程序如果要用到主机名的话，通常是从这个环境变量中来取得的</li>
<li>PS1：是基本提示符，对于root用户是#，对于普通用户是$</li>
<li>PS2：是附属提示符，默认是“&gt;”。可以通过修改此环境变量来修改当前的命令符，比如下列命令会将提示符修改成字符串“Hello,My NewPrompt :) ”</li>
</ul>
<h3 id="环境变量设置">环境变量设置</h3>
<p><em>Linux/Unix系统是多用户系统，每个用户登录系统后，都会有一个专用的运行环境。通常每个用户默认的环境都是相同的，默认的这一组环境实际上就是一组全局的环境变量。对于单个用户，可以根据自己的需求对自己的运行环境进行定制，其方法就是修改相应的系统环境变量。</em></p>
<p>这些环境变量都是在某些特定的文件中被定义的：</p>
<pre><code>    /etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.
    并从/etc/profile.d目录的配置文件中搜集<span class="built_in">shell</span>的设置.
    /etc/bashrc:为每一个运行bash <span class="built_in">shell</span>的用户执行此文件.当bash <span class="built_in">shell</span>被打开时,该文件被读取.
    ~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的<span class="built_in">shell</span>信息,当用户登录时,该
    文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.
    ~/.bashrc:该文件包含专用于你的bash <span class="built_in">shell</span>的bash信息,当登录时以及每次打开新的<span class="built_in">shell</span>时,该
    该文件被读取.
    ~/.bash_logout:当每次退出系统(退出bash <span class="built_in">shell</span>)时,执行该文件. 
</code></pre><p>另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是”父子”关系.</p>
<pre><code>    ~/.bash_profile 是交互式、login 方式进入 bash 运行的
    ~/.bashrc 是交互式 non-login 方式进入 bash 运行的
</code></pre><p>通常二者设置大致相同，所以通常前者会调用后者。</p>
<p>设置生效：可以重启生效，也可以使用命令：source<br>    source /etc/profile</p>
<p> .bash_profile、.bashrc、和.bash_logout详细区别还请看<a href="http://blog.163.com/wang_hai_fei/blog/static/309020312008728333912/" title="环境变量详情">环境变量详情</a></p>
<hr>
<p> 目前理解到的就这些，等有了新的收获再更新吧</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>-日常应用和开发过程中，经常会遇到一些问题，比如移动删除某些文件，批量的做某些重复的工作、某些工具的使用，使用命令行工具会更加方便。若要使用命令行工具，一定要知道它的使用环境，在这里学习一下 bash shell 的环境变量。-</p>
<p>]]>
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://sthkey.com/tags/Linux-Unix/"/>
    
      <category term="学习记录" scheme="http://sthkey.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
